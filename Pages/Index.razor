@page "/"
<!-- Injecoes de Dependencia -->
@inject IJSRuntime JSRuntime
<!-- Conteudo-Inicio -->
<div class="card d-flex">
    <div class="card-header container-fluid">
        <div class="d-flex justify-content-between" style="font-size: 1.5em">
            <div>
                <p>Pontos de Habilidade: @TeamRedMediaOfSkillPointSum</p>
            </div>
            <div class="button-container text-center mt-2">
                <button class="btn btn-primary shuffle-button" style="font-size: 1em" @onclick="ShufflePlayers">Balancear</button>
            </div>
            <div>
                <p>Pontos de Habilidade: @TeamBlackMediaOfSkillPointSum</p>
            </div>
        </div>
    </div>
    <div class="card-body d-inline-flex justify-content-between container-fluid">
        <!-- TEAM RED -->
        <div class="bg-light mx-2 container-fluid p-2 border border-secondary rounded border-1">
            <h2 class="text-center bg-danger text-light container-fluid">Time Vermelho</h2>
            <div class="container-fluid row justify-content-center">
                @if (PlayersTeamRed != null)
                {
                    @foreach (var player in PlayersTeamRed)
                    {
                        <div class="card mb-1" @onclick="() => TogglePlayer(player)">
                            <img src="@player.ImageUrl" class="card-img-top" style="height: 70px; width: 70px;" alt="@player.Name">
                            <div class="card-body">
                                <p class="card-text text-center">@player.Name</p>
                                <div class="card-footer">
                                <p class="card-text text-center">Nível: @player.SkillPointsAverage</p>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
        <!-- TEAM BLACK -->
        <div class="bg-light mx-2 container-fluid p-2 border border-secondary rounded border-1">
            <h2 class="text-center bg-black text-light container-fluid">Time Preto</h2>
            <div class="container-fluid row justify-content-center">
                @if (PlayersTeamBlack != null)
                {
                    @foreach (var player in PlayersTeamBlack)
                    {
                        <div class="card mb-1" @onclick="() => TogglePlayer(player)">
                            <img src="@player.ImageUrl" class="card-img-top" style="height: 70px; width: 70px;" alt="@player.Name">
                            <div class="card-body">
                                <p class="card-text text-center">@player.Name</p>
                            </div>
                            <div class="card-footer">
                                <p class="card-text text-center text-end">Nível: @player.SkillPointsAverage</p>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

    </div>

</div>
<footer class="container-fluid bg-secondary bg-opacity-75 bg-opacity-50 border border-secondary rounded border-3">
    <div class="modal-header">
        <div class="d-inline-flex">
            <h2 class="mt-2"><span class="fw-bold">Barreira: </span><span class="bg-warning bg-opacity-100 px-2 py-2">@PlayersTeamOutGame.Count</span> jogadores cansados</h2>
        </div>
        <div class="d-inline-flex align-content-end">
            <button class="btn btn-success mt-2 me-2" style="font-size: 2em" @onclick="ShuffleTeamOutGame">Embaralhar Barreira</button>
            <button class="btn btn-warning mt-2 text-white" style="font-size: 2em" @onclick="ShowAddPlayerPopup">Novo Jogador</button>
        </div>
    </div>
    <!-- Listagem de jogadores na barreira -->
    <div class="container-fluid">
        <div class="d-flex flex-wrap align-content-start">
            @if (PlayersTeamOutGame != null && PlayersTeamOutGame.Any())
            {
                foreach (var player in PlayersTeamOutGame)
                {
                    <div class="card p-2 my-2 mx-1" style="flex: 0 1 calc(20% - 2vw);">
                        <div class="card-header m-0 p-0 text-center">
                            <img src="@player.ImageUrl" class="card-img-top" style="max-width: 150px; max-height: 150px;" alt="@player.Name">
                        </div>
                        <div class="card-body m-0 p-0">
                            <p class="card-title text-center bg-light">@player.Name</p>
                            <p class="card-text text-center bg-warning bg-opacity-75">Nível: @player.SkillPointsAverage</p>
                        </div>
                        <div class="card-footer m-0 p-0 d-block d-inline-block bg-secondary bg-opacity-10 container-fluid">
                            <div>
                                <button class="btn btn-primary container-fluid" @onclick="() => TogglePlayer(player)">
                                    <span class="oi oi-plus" />
                                    <p>Adicionar à Partida</p>
                                </button>
                            </div>
                            <div>
                                <button class="btn btn-danger mt-1 container-fluid" @onclick="() => DeletePlayerOfTeamOutGameList(player)">
                                    <span class="oi oi-trash" />
                                    <p>Remover</p>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="bg-light">
                    <p class="text-danger align-middle">Não há jogadores reservas</p>
                </div>
            }
        </div>
    </div>
</footer>
<!-- Popup para adicionar novo jogador -->
@if (showAddPlayerPopup)
{
    <div class="popup">
        <div class="popup-content">
            <span class="close-popup" @onclick="HideAddPlayerPopup">&times;</span>
            <h2 class="popup-title">Adicionar Novo Jogador</h2>
            <form>
                <div class="form-group">
                    <label for="newPlayerName">Nome:</label>
                    <input type="text" id="newPlayerName" @bind="newPlayerName" class="form-control">
                </div>

                <div class="form-group">
                    <label for="newPlayerImageUrl">URL da Foto de Perfil:</label>
                    <input type="text" id="newPlayerImageUrl" @bind="newPlayerImageUrl" class="form-control">
                </div>

                <div class="form-group">
                    <label for="newPlayerPoints">Pontos (de 0 a 10):</label>
                    <input type="number" id="newPlayerPoints" @bind="newPlayerPoints" min="0" max="10" class="form-control">
                </div>

                <button type="button" @onclick="AddNewPlayer" class="btn btn-primary">Adicionar</button>
            </form>
        </div>
    </div>
}

@code {
    private List<Player> PlayersTeamRed = new();
    private List<Player> PlayersTeamBlack = new();
    private Queue<Player> PlayersTeamOutGame = new Queue<Player>();
    private List<TeamCombination> TeamCombinations = new();

    private bool isFirstMatch = true;

    private bool showAddPlayerPopup = false;
    private string newPlayerName = "";
    private string newPlayerImageUrl = "";
    private float newPlayerPoints = 0.00f;

    private float TeamRedMediaOfSkillPointSum { get; set; } = 0.00f;
    private float TeamBlackMediaOfSkillPointSum { get; set; } = 0.00f;

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized method called");
        // Adicionar jogadores à lista inicial
        PlayersTeamOutGame = new Queue<Player>(new[]
        {
            new Player { Name = "Matheus Delmondes", ImageUrl = "../assets/admin_profile.jpg", SkillPointsAverage = 6.33f },
            new Player { Name = "Antonino", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 7.17f },
            new Player { Name = "Bruno Zamorano", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 7.17f },
            new Player { Name = "Lucas Bessa", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 5.33f },
            new Player { Name = "Alexandre V.", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 5.17f },
            new Player { Name = "Henrique Lino", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 4.5f },
            new Player { Name = "Rihan", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 7.17f },
            new Player { Name = "Benjamin", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 3.00f },
            new Player { Name = "Iago Kaique", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 4.00f },
            new Player { Name = "Ataías", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 4.50f },
            new Player { Name = "Matheus F. James", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 7.83f },
            new Player { Name = "Fábio", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 7.50f },
            new Player { Name = "MV", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 6.17f },
            new Player { Name = "Marcos", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 7.17f },
            new Player { Name = "Thiago Melo", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 4.17f },
            new Player { Name = "Gabriel Borba", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 3.50f },
            new Player { Name = "Otávio", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 2.67f },
            new Player { Name = "Breno", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 5.50f },
            new Player { Name = "Samuel", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 8.67f },
            new Player { Name = "Ismael", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 8.00f },
            new Player { Name = "Gabriel Marques", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 8.33f },
            new Player { Name = "Cleyton", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 8.83f },
            new Player { Name = "Hitalo", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 7.66f },
            new Player { Name = "Magno", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 3.67f },
            new Player { Name = "Hanna", ImageUrl = "../assets/default_profile.jpg", SkillPointsAverage = 5.00f },
        });

        base.OnInitialized();
    }
    private async Task MostrarAlerta()
    {
        await JSRuntime.InvokeAsync<object>("alert", "Os times foram balanceados. Clique em 'Ok' para ver o resultado. ;-)");
    }
    private async Task MostrarAlerta(string message)
    {
        await JSRuntime.InvokeAsync<object>("alert", message);
    }
    private async void ShufflePlayers()
    {
        bool alreadyHasPlayersToPlayAMatch = PlayersTeamRed.Any() && PlayersTeamBlack.Any();
        if (!alreadyHasPlayersToPlayAMatch)
        {
            while (PlayersTeamRed.Count <= 5 && PlayersTeamBlack.Count < 5)
            {
                int playerOutGameQuantity = PlayersTeamOutGame.Count();
                int randomIndex = new Random().Next(0, playerOutGameQuantity);
                TogglePlayer(PlayersTeamOutGame.Peek());
                await Task.Delay(70);
            }
            await Task.Delay(2000);
        }
        while (PlayersTeamRed.Count != 5 || PlayersTeamBlack.Count != 5)
        {
            int playerOutGameQuantity = PlayersTeamOutGame.Count();
            int randomIndex = new Random().Next(0, playerOutGameQuantity);
            //TogglePlayer(PlayersTeamOutGame.ElementAt(randomIndex));
            TogglePlayer(PlayersTeamOutGame.Peek());
            await Task.Delay(70);
        }
        var teamRed = new List<Player>(PlayersTeamRed);
        var teamBlack = new List<Player>(PlayersTeamBlack);
        var teamRedSum = GetSum(teamRed);
        var teamBlackSum = GetSum(teamBlack);

        bool isBetter = true;

        while (isBetter)
        {
            isBetter = false;
            int betterI = -1;
            int betterJ = -1;
            float betterDifference = Math.Abs(teamRedSum - teamBlackSum);

            // Testa todas as possíveis trocas entre os conjuntos
            for (int i = 0; i < teamRed.Count; i++)
            {
                for (int j = 0; j < teamBlack.Count; j++)
                {
                    // Calcula a nova soma de cada conjunto se trocar os jogadores nas posições i e j
                    float newTeamRedSum = teamRedSum - teamRed[i].SkillPointsAverage + teamBlack[j].SkillPointsAverage;
                    float newTeamBlackSum = teamBlackSum - teamBlack[j].SkillPointsAverage + teamRed[i].SkillPointsAverage;

                    // Calcula a nova diferença entre as somas (considerando apenas o valor absoluto/modular)
                    float newDifference = Math.Abs(newTeamRedSum - newTeamBlackSum);

                    // Se a nova diferença for menor que a melhor diferença encontrada até agora, atualiza as variáveis
                    if (newDifference < betterDifference)
                    {
                        betterI = i;
                        betterJ = j;
                        betterDifference = newDifference;
                        isBetter = true;
                    }
                }
            }

            // Se houve melhoria, realiza a troca entre os conjuntos e atualiza as somas
            if (isBetter)
            {
                Player _ = teamRed[betterI];
                teamRed[betterI] = teamBlack[betterJ];
                teamBlack[betterJ] = _;

                teamRedSum = GetSum(teamRed);
                teamBlackSum = GetSum(teamBlack);
            }
        }
        // Imprime os times finais
        Console.WriteLine("Time Red:");
        foreach (var jogador in teamRed)
        {
            Console.WriteLine($"{jogador.Name}: {jogador.SkillPointsAverage}");
        }

        Console.WriteLine("\nTime Black:");
        foreach (var jogador in teamBlack)
        {
            Console.WriteLine($"{jogador.Name}: {jogador.SkillPointsAverage}");
        }

        PlayersTeamRed = new List<Player>(teamRed);
        PlayersTeamBlack = new List<Player>(teamBlack);
        TeamRedMediaOfSkillPointSum = teamRedSum;
        TeamBlackMediaOfSkillPointSum = teamBlackSum;
        UpdateUI();
        await MostrarAlerta();
    }
    static float GetSum(List<Player> jogadores) => jogadores.Sum(p => p.SkillPointsAverage);
    private void TogglePlayer(Player player)
    {
        Console.WriteLine($"TogglePlayer method called for player: {player.Name}");

        if (PlayersTeamRed.Contains(player) || PlayersTeamBlack.Contains(player))
        {
            // Se o jogador está em um time, remove-o e o adiciona de volta à fila
            PlayersTeamOutGame.Enqueue(player);
            PlayersTeamRed.Remove(player);
            PlayersTeamBlack.Remove(player);
        }
        else if (PlayersTeamRed.Count < 5)
        {
            // Se houver espaço no time vermelho, adiciona o jogador ao time vermelho
            PlayersTeamRed.Add(player);
            DeletePlayerOfTeamOutGameList(player);
            //PlayersTeamOutGame.Dequeue(); // Remove o jogador da fila
        }
        else if (PlayersTeamBlack.Count < 5)
        {
            // Se houver espaço no time preto, adiciona o jogador ao time preto
            PlayersTeamBlack.Add(player);
            DeletePlayerOfTeamOutGameList(player);
            //PlayersTeamOutGame.Dequeue(); // Remove o jogador da fila
        }
        // Default
        TeamRedMediaOfSkillPointSum = GetSum(PlayersTeamRed);
        TeamBlackMediaOfSkillPointSum = GetSum(PlayersTeamBlack);
        Console.WriteLine($"Player {player.Name} toggled. TeamRed count: {PlayersTeamRed.Count}, TeamBlack count: {PlayersTeamBlack.Count}, TeamOutGame count: {PlayersTeamOutGame.Count}");

        UpdateUI();
    }
    private void ShowAddPlayerPopup()
    {
        showAddPlayerPopup = true;
        UpdateUI();
    }
    private void HideAddPlayerPopup()
    {
        showAddPlayerPopup = false;
        UpdateUI();
    }
    private void AddNewPlayer()
    {
        // Validar os dados do novo jogador aqui, se necessário
        if (string.IsNullOrWhiteSpace(newPlayerName))
        {
            MostrarAlerta("Ao cadastrador um Novo Jogador, é importante que informe o nome dele. Colabore. :)");
            return;
        }

        if (PlayersTeamOutGame == null)
        {
            PlayersTeamOutGame = new Queue<Player>();
        }

        if (string.IsNullOrWhiteSpace(newPlayerImageUrl))
        {
            // newPlayerImageUrl = @"~\wwwroot\assets\default_profile.jpg";
            newPlayerImageUrl = @"../assets/default_profile.jpg";
        }

        // Criar o novo jogador
        var newPlayer = new Player
            {
                Name = newPlayerName,
                ImageUrl = newPlayerImageUrl,
                SkillPointsAverage = newPlayerPoints
            };

        // Adicionar o novo jogador à fila da barreira
        PlayersTeamOutGame.Enqueue(newPlayer);

        // Limpar os campos do formulário
        newPlayerName = "";
        newPlayerImageUrl = "";
        newPlayerPoints = 0.00f;

        // Fechar o popup
        showAddPlayerPopup = false;
        UpdateUI();
    }
    private void UpdateUI()
    {
        InvokeAsync(() => StateHasChanged());
    }
    private void DeletePlayerOfTeamOutGameList(Player player)
    {
        if (PlayersTeamOutGame.Contains(player))
        {
            List<Player> _ = PlayersTeamOutGame.ToList();
            _.Remove(player);
            PlayersTeamOutGame = new Queue<Player>(_);
        }
    }
    private async void ShuffleTeamOutGame()
    {
        List<Player> _ = PlayersTeamOutGame.ToList();
        int length = _.Count;
        while (length > 1)
        {
            length--;
            int randomIndex = new Random().Next(length + 1);
            Player _randomPlayer = _[randomIndex];
            _[randomIndex] = _[length];
            _[length] = _randomPlayer;
        }
        PlayersTeamOutGame = new Queue<Player>(_);
        await MostrarAlerta("A barreira foi embaralhada");
    }
    class TeamCombination
    {
        public List<Player> TeamRed { get; set; }
        public List<Player> TeamBlack { get; set; }
        public double AveragePointsDifference { get; set; }
        public double AveragePointsRed { get; set; }
        public double AveragePointsBlack { get; set; }
    }
    class Player
    {
        public string Name { get; set; } = "Anônimo";
        public float SkillPointsAverage { get; set; } = 0.00f;
        public string ImageUrl { get; set; } = "../assets/default_profile.jpg";
    }
}